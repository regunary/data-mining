version: "3.9"

services:
  # Dremio Service
  dremio:
    platform: linux/x86_64
    image: dremio/dremio-oss:latest
    environment:
      - DREMIO_ADMIN_USER=admin
      - DREMIO_ADMIN_PASSWORD=admin
      - DREMIO_DATA_DIR=/var/lib/dremio
    ports:
      - 9047:9047 # Dremio UI
      - 31010:31010 # Dremio ODBC/JDBC
      - 32010:32010
    container_name: dremio

  # MinIO Service
  minioserver:
    image: minio/minio
    ports:
      - 9000:9000 # minio console
      - 9001:9001 # minio admin console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    container_name: minioserver
    command: server /data --console-address ":9001"
  
  # Nessie Service
  nessie:
    image: projectnessie/nessie
    container_name: nessie
    ports:
      - "19120:19120"

  # Airflow Service
  postgres:
    container_name: postgres
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  airflow-init:
    image: apache/airflow:2.7.0
    container_name: airflow-init
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
    command: >
        bash -c "airflow db init && airflow db migrate &&
           airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin"

    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    healthcheck:
      test: ["CMD-SHELL", "airflow db check || exit 1"]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 5s

  airflow-webserver:
    image: apache/airflow:2.7.0
    container_name: airflow-webserver
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__WEBSERVER__DEFAULT_UI_USER_ROLE: Admin
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW_WEBSERVER_BASE_URL: http://localhost:8080
      AIRFLOW__CORE__FERNET_KEY: "QeC9m8DBa9Pmq5yztQ80yU8Y5Xo0gx79gCXx4i9CP_g="
    command: webserver
    ports:
      - "8088:8080"  # Expose UI on port 8088
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - default

  airflow-scheduler:
    image: apache/airflow:2.7.0
    container_name: airflow-scheduler
    depends_on:
      airflow-webserver:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW_WEBSERVER_BASE_URL: http://localhost:8080
      AIRFLOW__CORE__FERNET_KEY: "QeC9m8DBa9Pmq5yztQ80yU8Y5Xo0gx79gCXx4i9CP_g="
    command: >
      bash -c "airflow scheduler"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    networks:
      - default

  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.5.0
  #   container_name: zookeeper
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2182
  #     ZOOKEEPER_TICK_TIME: 2000
  #   ports:
  #     - "2182:2182"
  #   healthcheck:
  #     test: ['CMD', 'bash', '-c', "echo 'ruok' | nc localhost 2182"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - default

  # kafka:
  #   hostname: kafka
  #   image: confluentinc/cp-kafka:7.5.0
  #   container_name: kafka
  #   depends_on:
  #     zookeeper:
  #       condition: service_healthy
  #   ports:
  #     - "9092:9092"
  #     - "9101:9101"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
  #     KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2182
  #     KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8085
  #   networks:
  #     - default
  #   healthcheck:
  #     test: [ "CMD", "bash", "-c", 'nc -z localhost 9092' ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # schema-registry:
  #   image: confluentinc/cp-schema-registry:7.5.0
  #   container_name: schema-registry
  #   ports:
  #     - "8085:8085"
  #   environment:
  #     SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2182"
  #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
  #     SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8085"
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:9092"
  #   networks:
  #     - default
  #   healthcheck:
  #     test: [ "CMD", "curl", "-f", "http://localhost:8085/" ]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   depends_on:
  #     - zookeeper

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    depends_on:
      - kafka-broker-1
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka-broker-1:9092,PLAINTEXT_INTERNAL://localhost:19092
      SCHEMA_REGISTRY_DEBUG: 'true'

  kafka-broker-1:
    image: confluentinc/cp-kafka:latest
    hostname: kafka-broker-1
    ports:
      - "19092:19092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-1:9092,PLAINTEXT_INTERNAL://localhost:19092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.5.1
    hostname: control-center
    container_name: control-center
    depends_on:
      - kafka-broker-1
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka-broker-1:9092'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      PORT: 9021
    networks:
      - default
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9021/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    

volumes:
  postgres_data:
    driver: local
  airflow-config:
    driver: local

networks:
  default:
    driver: bridge
  kafka-network:
    driver: bridge
